// Run validation on the changes in a pull request
asdfas
node {
   podName = "openshift-tools-pr-validator-${BUILD_NUMBER}"
   stage 'Create'
     openshiftCreateResource apiURL: '', authToken: '', jsonyaml: """{
  "kind": "Pod",
  "apiVersion": "v1",
  "metadata": {
    "name": $podName,
    "labels": {
      "name": "openshift-tools-pr-validation"
    }
  },
  "spec": {
    "containers": [
      {
        "name": "openshift-tools-pr-validation",
        "image": "registry.ops.openshift.com/ops/oso-rhel7-host-monitoring:prod",
        "env": [
          {
            "name": "GITHUB_WEBHOOK_PAYLOAD",
            "value": "${payload}"
          }
        ],
        "ports": [],
        "resources": {},
        "imagePullPolicy": "IfNotPresent",
        "capabilities": {},
        "securityContext": {
          "capabilities": {},
          "privileged": false
        }
      }
    ],
    "volumes": [],
    "restartPolicy": "Never",
    "serviceAccount": ""
  },
  "status": {}
  }""", namespace: "${PROJECT_NAME}", verbose: 'false'
  sleep 10

  stage 'Execute'
    try {
        def response = openshiftExec apiURL: '', authToken: '', command: '/usr/bin/python', arguments: [[value: '/validator/openshift-tools/jenkins/bin/pr_validation.py']], container: '', namespace: "${PROJECT_NAME}", pod: "${podName}", verbose: 'false', waitTime: '10', waitUnit: 'min'
        if ( response.error == "" && response.failure == "") {
            println('Stdout: '+response.stdout.trim())
            println('Stderr: '+response.stderr.trim())
        } else {
            throw new RuntimeException(response.error + " ||| " + response.failure)
        }
    } catch(err) {
        println("Unable to execute validation on pod ${podName}")
        println("Cleaning up...")
        deletePod(podName)
        throw err
    }

  stage 'Cleanup'
   deletePod(podName)

}

def deletePod(name) {
    println("Deleting pod ${name}")
    openshiftDeleteResourceByKey apiURL: '', namespace: "${PROJECT_NAME}", authToken: '', keys: "${name}", types: 'pod', verbose: 'false'
}


